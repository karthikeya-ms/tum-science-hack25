/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../models/HTTPValidationError';
import UserResponse from '../models/UserResponse';
import UserRole from '../models/UserRole';
import UserStatus from '../models/UserStatus';

/**
* Users service.
* @module api/UsersApi
* @version 0.1.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getActiveUsersUsersActiveAllGet operation.
     * @callback module:api/UsersApi~getActiveUsersUsersActiveAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/UserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Active Users
     * Get all active users.
     * @param {module:api/UsersApi~getActiveUsersUsersActiveAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/UserResponse>}
     */
    getActiveUsersUsersActiveAllGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserResponse];
      return this.apiClient.callApi(
        '/users/active/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllUsersUsersGet operation.
     * @callback module:api/UsersApi~getAllUsersUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/UserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Users
     * Get all users.
     * @param {module:api/UsersApi~getAllUsersUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/UserResponse>}
     */
    getAllUsersUsersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserResponse];
      return this.apiClient.callApi(
        '/users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInactiveUsersUsersInactiveAllGet operation.
     * @callback module:api/UsersApi~getInactiveUsersUsersInactiveAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/UserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Inactive Users
     * Get all inactive users.
     * @param {module:api/UsersApi~getInactiveUsersUsersInactiveAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/UserResponse>}
     */
    getInactiveUsersUsersInactiveAllGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserResponse];
      return this.apiClient.callApi(
        '/users/inactive/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNgosUsersNgosAllGet operation.
     * @callback module:api/UsersApi~getNgosUsersNgosAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/UserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Ngos
     * Get all NGO users.
     * @param {module:api/UsersApi~getNgosUsersNgosAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/UserResponse>}
     */
    getNgosUsersNgosAllGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserResponse];
      return this.apiClient.callApi(
        '/users/ngos/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOperatorsUsersOperatorsAllGet operation.
     * @callback module:api/UsersApi~getOperatorsUsersOperatorsAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/UserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Operators
     * Get all Operator users, optionally filtered by Team Lead.
     * @param {Object} opts Optional parameters
     * @param {String} [teamLeadId] 
     * @param {module:api/UsersApi~getOperatorsUsersOperatorsAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/UserResponse>}
     */
    getOperatorsUsersOperatorsAllGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'team_lead_id': opts['teamLeadId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserResponse];
      return this.apiClient.callApi(
        '/users/operators/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamLeadsUsersTeamLeadsAllGet operation.
     * @callback module:api/UsersApi~getTeamLeadsUsersTeamLeadsAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/UserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Team Leads
     * Get all Team Lead users, optionally filtered by NGO.
     * @param {Object} opts Optional parameters
     * @param {String} [ngoId] 
     * @param {module:api/UsersApi~getTeamLeadsUsersTeamLeadsAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/UserResponse>}
     */
    getTeamLeadsUsersTeamLeadsAllGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ngo_id': opts['ngoId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserResponse];
      return this.apiClient.callApi(
        '/users/team-leads/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserByIdUsersUserIdGet operation.
     * @callback module:api/UsersApi~getUserByIdUsersUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:models/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User By Id
     * Get a user by ID.
     * @param {String} userId 
     * @param {module:api/UsersApi~getUserByIdUsersUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/UserResponse}
     */
    getUserByIdUsersUserIdGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserByIdUsersUserIdGet");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserResponse;
      return this.apiClient.callApi(
        '/users/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserByUsernameUsersUsernameUsernameGet operation.
     * @callback module:api/UsersApi~getUserByUsernameUsersUsernameUsernameGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/UserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User By Username
     * Get users by username.
     * @param {String} username 
     * @param {module:api/UsersApi~getUserByUsernameUsersUsernameUsernameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/UserResponse>}
     */
    getUserByUsernameUsersUsernameUsernameGet(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUserByUsernameUsersUsernameUsernameGet");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserResponse];
      return this.apiClient.callApi(
        '/users/username/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersByParentUsersParentParentUserIdGet operation.
     * @callback module:api/UsersApi~getUsersByParentUsersParentParentUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/UserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Users By Parent
     * Get all users under a specific parent user.
     * @param {String} parentUserId 
     * @param {module:api/UsersApi~getUsersByParentUsersParentParentUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/UserResponse>}
     */
    getUsersByParentUsersParentParentUserIdGet(parentUserId, callback) {
      let postBody = null;
      // verify the required parameter 'parentUserId' is set
      if (parentUserId === undefined || parentUserId === null) {
        throw new Error("Missing the required parameter 'parentUserId' when calling getUsersByParentUsersParentParentUserIdGet");
      }

      let pathParams = {
        'parent_user_id': parentUserId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserResponse];
      return this.apiClient.callApi(
        '/users/parent/{parent_user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersByRoleUsersRoleRoleGet operation.
     * @callback module:api/UsersApi~getUsersByRoleUsersRoleRoleGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/UserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Users By Role
     * Get all users with a specific role.
     * @param {module:models/UserRole} role 
     * @param {module:api/UsersApi~getUsersByRoleUsersRoleRoleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/UserResponse>}
     */
    getUsersByRoleUsersRoleRoleGet(role, callback) {
      let postBody = null;
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling getUsersByRoleUsersRoleRoleGet");
      }

      let pathParams = {
        'role': role
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserResponse];
      return this.apiClient.callApi(
        '/users/role/{role}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersByStatusUsersStatusStatusGet operation.
     * @callback module:api/UsersApi~getUsersByStatusUsersStatusStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/UserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Users By Status
     * Get all users with a specific status.
     * @param {module:models/UserStatus} status 
     * @param {module:api/UsersApi~getUsersByStatusUsersStatusStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/UserResponse>}
     */
    getUsersByStatusUsersStatusStatusGet(status, callback) {
      let postBody = null;
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling getUsersByStatusUsersStatusStatusGet");
      }

      let pathParams = {
        'status': status
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserResponse];
      return this.apiClient.callApi(
        '/users/status/{status}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

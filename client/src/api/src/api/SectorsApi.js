/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../models/HTTPValidationError';
import SectorCreate from '../models/SectorCreate';
import SectorResponse from '../models/SectorResponse';
import SectorStatus from '../models/SectorStatus';

/**
* Sectors service.
* @module api/SectorsApi
* @version 0.1.0
*/
export default class SectorsApi {

    /**
    * Constructs a new SectorsApi. 
    * @alias module:api/SectorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assignSectorToNgoSectorsSectorIdAssignNgoNgoIdPut operation.
     * @callback module:api/SectorsApi~assignSectorToNgoSectorsSectorIdAssignNgoNgoIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:models/SectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign Sector To Ngo
     * Assign a sector to an NGO.
     * @param {String} sectorId 
     * @param {String} ngoId 
     * @param {module:api/SectorsApi~assignSectorToNgoSectorsSectorIdAssignNgoNgoIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/SectorResponse}
     */
    assignSectorToNgoSectorsSectorIdAssignNgoNgoIdPut(sectorId, ngoId, callback) {
      let postBody = null;
      // verify the required parameter 'sectorId' is set
      if (sectorId === undefined || sectorId === null) {
        throw new Error("Missing the required parameter 'sectorId' when calling assignSectorToNgoSectorsSectorIdAssignNgoNgoIdPut");
      }
      // verify the required parameter 'ngoId' is set
      if (ngoId === undefined || ngoId === null) {
        throw new Error("Missing the required parameter 'ngoId' when calling assignSectorToNgoSectorsSectorIdAssignNgoNgoIdPut");
      }

      let pathParams = {
        'sector_id': sectorId,
        'ngo_id': ngoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SectorResponse;
      return this.apiClient.callApi(
        '/sectors/{sector_id}/assign/ngo/{ngo_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assignSectorToOperatorSectorsSectorIdAssignOperatorOperatorIdPut operation.
     * @callback module:api/SectorsApi~assignSectorToOperatorSectorsSectorIdAssignOperatorOperatorIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:models/SectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign Sector To Operator
     * Assign a sector to an Operator.
     * @param {String} sectorId 
     * @param {String} operatorId 
     * @param {module:api/SectorsApi~assignSectorToOperatorSectorsSectorIdAssignOperatorOperatorIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/SectorResponse}
     */
    assignSectorToOperatorSectorsSectorIdAssignOperatorOperatorIdPut(sectorId, operatorId, callback) {
      let postBody = null;
      // verify the required parameter 'sectorId' is set
      if (sectorId === undefined || sectorId === null) {
        throw new Error("Missing the required parameter 'sectorId' when calling assignSectorToOperatorSectorsSectorIdAssignOperatorOperatorIdPut");
      }
      // verify the required parameter 'operatorId' is set
      if (operatorId === undefined || operatorId === null) {
        throw new Error("Missing the required parameter 'operatorId' when calling assignSectorToOperatorSectorsSectorIdAssignOperatorOperatorIdPut");
      }

      let pathParams = {
        'sector_id': sectorId,
        'operator_id': operatorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SectorResponse;
      return this.apiClient.callApi(
        '/sectors/{sector_id}/assign/operator/{operator_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assignSectorToTeamLeadSectorsSectorIdAssignTeamLeadTeamLeadIdPut operation.
     * @callback module:api/SectorsApi~assignSectorToTeamLeadSectorsSectorIdAssignTeamLeadTeamLeadIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:models/SectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign Sector To Team Lead
     * Assign a sector to a Team Lead.
     * @param {String} sectorId 
     * @param {String} teamLeadId 
     * @param {module:api/SectorsApi~assignSectorToTeamLeadSectorsSectorIdAssignTeamLeadTeamLeadIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/SectorResponse}
     */
    assignSectorToTeamLeadSectorsSectorIdAssignTeamLeadTeamLeadIdPut(sectorId, teamLeadId, callback) {
      let postBody = null;
      // verify the required parameter 'sectorId' is set
      if (sectorId === undefined || sectorId === null) {
        throw new Error("Missing the required parameter 'sectorId' when calling assignSectorToTeamLeadSectorsSectorIdAssignTeamLeadTeamLeadIdPut");
      }
      // verify the required parameter 'teamLeadId' is set
      if (teamLeadId === undefined || teamLeadId === null) {
        throw new Error("Missing the required parameter 'teamLeadId' when calling assignSectorToTeamLeadSectorsSectorIdAssignTeamLeadTeamLeadIdPut");
      }

      let pathParams = {
        'sector_id': sectorId,
        'team_lead_id': teamLeadId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SectorResponse;
      return this.apiClient.callApi(
        '/sectors/{sector_id}/assign/team-lead/{team_lead_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSectorSectorsPost operation.
     * @callback module:api/SectorsApi~createSectorSectorsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:models/SectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Sector
     * Create a new sector.
     * @param {module:models/SectorCreate} sectorCreate 
     * @param {module:api/SectorsApi~createSectorSectorsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/SectorResponse}
     */
    createSectorSectorsPost(sectorCreate, callback) {
      let postBody = sectorCreate;
      // verify the required parameter 'sectorCreate' is set
      if (sectorCreate === undefined || sectorCreate === null) {
        throw new Error("Missing the required parameter 'sectorCreate' when calling createSectorSectorsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SectorResponse;
      return this.apiClient.callApi(
        '/sectors/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSectorSectorsSectorIdDelete operation.
     * @callback module:api/SectorsApi~deleteSectorSectorsSectorIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Sector
     * Delete a sector.
     * @param {String} sectorId 
     * @param {module:api/SectorsApi~deleteSectorSectorsSectorIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSectorSectorsSectorIdDelete(sectorId, callback) {
      let postBody = null;
      // verify the required parameter 'sectorId' is set
      if (sectorId === undefined || sectorId === null) {
        throw new Error("Missing the required parameter 'sectorId' when calling deleteSectorSectorsSectorIdDelete");
      }

      let pathParams = {
        'sector_id': sectorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sectors/{sector_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllSectorsSectorsGet operation.
     * @callback module:api/SectorsApi~getAllSectorsSectorsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/SectorResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Sectors
     * Get all sectors.
     * @param {module:api/SectorsApi~getAllSectorsSectorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/SectorResponse>}
     */
    getAllSectorsSectorsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SectorResponse];
      return this.apiClient.callApi(
        '/sectors/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompletelyUnassignedSectorsSectorsUnassignedAllGet operation.
     * @callback module:api/SectorsApi~getCompletelyUnassignedSectorsSectorsUnassignedAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/SectorResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Completely Unassigned Sectors
     * Get sectors that are not assigned to any user (NGO, Team Lead, or Operator).
     * @param {module:api/SectorsApi~getCompletelyUnassignedSectorsSectorsUnassignedAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/SectorResponse>}
     */
    getCompletelyUnassignedSectorsSectorsUnassignedAllGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SectorResponse];
      return this.apiClient.callApi(
        '/sectors/unassigned/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSectorByIdSectorsSectorIdGet operation.
     * @callback module:api/SectorsApi~getSectorByIdSectorsSectorIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:models/SectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sector By Id
     * Get a sector by ID.
     * @param {String} sectorId 
     * @param {module:api/SectorsApi~getSectorByIdSectorsSectorIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/SectorResponse}
     */
    getSectorByIdSectorsSectorIdGet(sectorId, callback) {
      let postBody = null;
      // verify the required parameter 'sectorId' is set
      if (sectorId === undefined || sectorId === null) {
        throw new Error("Missing the required parameter 'sectorId' when calling getSectorByIdSectorsSectorIdGet");
      }

      let pathParams = {
        'sector_id': sectorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SectorResponse;
      return this.apiClient.callApi(
        '/sectors/{sector_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSectorsByNgoSectorsNgoNgoIdGet operation.
     * @callback module:api/SectorsApi~getSectorsByNgoSectorsNgoNgoIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/SectorResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sectors By Ngo
     * Get all sectors assigned to a specific NGO.
     * @param {String} ngoId 
     * @param {module:api/SectorsApi~getSectorsByNgoSectorsNgoNgoIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/SectorResponse>}
     */
    getSectorsByNgoSectorsNgoNgoIdGet(ngoId, callback) {
      let postBody = null;
      // verify the required parameter 'ngoId' is set
      if (ngoId === undefined || ngoId === null) {
        throw new Error("Missing the required parameter 'ngoId' when calling getSectorsByNgoSectorsNgoNgoIdGet");
      }

      let pathParams = {
        'ngo_id': ngoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SectorResponse];
      return this.apiClient.callApi(
        '/sectors/ngo/{ngo_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSectorsByOperatorSectorsOperatorOperatorIdGet operation.
     * @callback module:api/SectorsApi~getSectorsByOperatorSectorsOperatorOperatorIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/SectorResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sectors By Operator
     * Get all sectors assigned to a specific Operator.
     * @param {String} operatorId 
     * @param {module:api/SectorsApi~getSectorsByOperatorSectorsOperatorOperatorIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/SectorResponse>}
     */
    getSectorsByOperatorSectorsOperatorOperatorIdGet(operatorId, callback) {
      let postBody = null;
      // verify the required parameter 'operatorId' is set
      if (operatorId === undefined || operatorId === null) {
        throw new Error("Missing the required parameter 'operatorId' when calling getSectorsByOperatorSectorsOperatorOperatorIdGet");
      }

      let pathParams = {
        'operator_id': operatorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SectorResponse];
      return this.apiClient.callApi(
        '/sectors/operator/{operator_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSectorsByStatusSectorsStatusStatusGet operation.
     * @callback module:api/SectorsApi~getSectorsByStatusSectorsStatusStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/SectorResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sectors By Status
     * Get all sectors with a specific status.
     * @param {module:models/SectorStatus} status 
     * @param {module:api/SectorsApi~getSectorsByStatusSectorsStatusStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/SectorResponse>}
     */
    getSectorsByStatusSectorsStatusStatusGet(status, callback) {
      let postBody = null;
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling getSectorsByStatusSectorsStatusStatusGet");
      }

      let pathParams = {
        'status': status
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SectorResponse];
      return this.apiClient.callApi(
        '/sectors/status/{status}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSectorsByTeamLeadSectorsTeamLeadTeamLeadIdGet operation.
     * @callback module:api/SectorsApi~getSectorsByTeamLeadSectorsTeamLeadTeamLeadIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/SectorResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sectors By Team Lead
     * Get all sectors assigned to a specific Team Lead.
     * @param {String} teamLeadId 
     * @param {module:api/SectorsApi~getSectorsByTeamLeadSectorsTeamLeadTeamLeadIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/SectorResponse>}
     */
    getSectorsByTeamLeadSectorsTeamLeadTeamLeadIdGet(teamLeadId, callback) {
      let postBody = null;
      // verify the required parameter 'teamLeadId' is set
      if (teamLeadId === undefined || teamLeadId === null) {
        throw new Error("Missing the required parameter 'teamLeadId' when calling getSectorsByTeamLeadSectorsTeamLeadTeamLeadIdGet");
      }

      let pathParams = {
        'team_lead_id': teamLeadId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SectorResponse];
      return this.apiClient.callApi(
        '/sectors/team-lead/{team_lead_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSectorsWithAssignmentsSectorsWithAssignmentsGet operation.
     * @callback module:api/SectorsApi~getSectorsWithAssignmentsSectorsWithAssignmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/SectorResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sectors With Assignments
     * Get all sectors with their assigned users loaded.
     * @param {module:api/SectorsApi~getSectorsWithAssignmentsSectorsWithAssignmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/SectorResponse>}
     */
    getSectorsWithAssignmentsSectorsWithAssignmentsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SectorResponse];
      return this.apiClient.callApi(
        '/sectors/with-assignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUnassignedNgoSectorsSectorsUnassignedNgoGet operation.
     * @callback module:api/SectorsApi~getUnassignedNgoSectorsSectorsUnassignedNgoGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/SectorResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Unassigned Ngo Sectors
     * Get sectors that are not assigned to any NGO.
     * @param {module:api/SectorsApi~getUnassignedNgoSectorsSectorsUnassignedNgoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/SectorResponse>}
     */
    getUnassignedNgoSectorsSectorsUnassignedNgoGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SectorResponse];
      return this.apiClient.callApi(
        '/sectors/unassigned/ngo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUnassignedOperatorSectorsSectorsUnassignedOperatorGet operation.
     * @callback module:api/SectorsApi~getUnassignedOperatorSectorsSectorsUnassignedOperatorGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/SectorResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Unassigned Operator Sectors
     * Get sectors that are not assigned to any Operator.
     * @param {module:api/SectorsApi~getUnassignedOperatorSectorsSectorsUnassignedOperatorGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/SectorResponse>}
     */
    getUnassignedOperatorSectorsSectorsUnassignedOperatorGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SectorResponse];
      return this.apiClient.callApi(
        '/sectors/unassigned/operator', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUnassignedTeamLeadSectorsSectorsUnassignedTeamLeadGet operation.
     * @callback module:api/SectorsApi~getUnassignedTeamLeadSectorsSectorsUnassignedTeamLeadGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/SectorResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Unassigned Team Lead Sectors
     * Get sectors that are not assigned to any Team Lead.
     * @param {module:api/SectorsApi~getUnassignedTeamLeadSectorsSectorsUnassignedTeamLeadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/SectorResponse>}
     */
    getUnassignedTeamLeadSectorsSectorsUnassignedTeamLeadGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SectorResponse];
      return this.apiClient.callApi(
        '/sectors/unassigned/team-lead', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSectorStatusSectorsSectorIdStatusStatusPut operation.
     * @callback module:api/SectorsApi~updateSectorStatusSectorsSectorIdStatusStatusPutCallback
     * @param {String} error Error message, if any.
     * @param {module:models/SectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Sector Status
     * Update the status of a sector.
     * @param {String} sectorId 
     * @param {module:models/SectorStatus} status 
     * @param {module:api/SectorsApi~updateSectorStatusSectorsSectorIdStatusStatusPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/SectorResponse}
     */
    updateSectorStatusSectorsSectorIdStatusStatusPut(sectorId, status, callback) {
      let postBody = null;
      // verify the required parameter 'sectorId' is set
      if (sectorId === undefined || sectorId === null) {
        throw new Error("Missing the required parameter 'sectorId' when calling updateSectorStatusSectorsSectorIdStatusStatusPut");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling updateSectorStatusSectorsSectorIdStatusStatusPut");
      }

      let pathParams = {
        'sector_id': sectorId,
        'status': status
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SectorResponse;
      return this.apiClient.callApi(
        '/sectors/{sector_id}/status/{status}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserRole from './UserRole';
import UserStatus from './UserStatus';

/**
 * The UserResponse model module.
 * @module models/UserResponse
 * @version 0.1.0
 */
class UserResponse {
    /**
     * Constructs a new <code>UserResponse</code>.
     * DTO for returning user information.
     * @alias module:models/UserResponse
     * @param id {String} 
     * @param role {module:models/UserRole} 
     * @param status {module:models/UserStatus} 
     * @param createdAt {Date} 
     */
    constructor(id, role, status, createdAt) { 
        
        UserResponse.initialize(this, id, role, status, createdAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, role, status, createdAt) { 
        obj['id'] = id;
        obj['role'] = role;
        obj['status'] = status;
        obj['created_at'] = createdAt;
    }

    /**
     * Constructs a <code>UserResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/UserResponse} obj Optional instance to populate.
     * @return {module:models/UserResponse} The populated <code>UserResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserResponse();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = UserRole.constructFromObject(data['role']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = UserStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('parent_user_id')) {
                obj['parent_user_id'] = ApiClient.convertToType(data['parent_user_id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['userName'] && !(typeof data['userName'] === 'string' || data['userName'] instanceof String)) {
            throw new Error("Expected the field `userName` to be a primitive type in the JSON string but got " + data['userName']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['parent_user_id'] && !(typeof data['parent_user_id'] === 'string' || data['parent_user_id'] instanceof String)) {
            throw new Error("Expected the field `parent_user_id` to be a primitive type in the JSON string but got " + data['parent_user_id']);
        }

        return true;
    }


}

UserResponse.RequiredProperties = ["id", "role", "status", "created_at"];

/**
 * @member {String} id
 */
UserResponse.prototype['id'] = undefined;

/**
 * @member {String} userName
 */
UserResponse.prototype['userName'] = undefined;

/**
 * @member {String} email
 */
UserResponse.prototype['email'] = undefined;

/**
 * @member {module:models/UserRole} role
 */
UserResponse.prototype['role'] = undefined;

/**
 * @member {module:models/UserStatus} status
 */
UserResponse.prototype['status'] = undefined;

/**
 * @member {String} parent_user_id
 */
UserResponse.prototype['parent_user_id'] = undefined;

/**
 * @member {Date} created_at
 */
UserResponse.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
UserResponse.prototype['updated_at'] = undefined;






export default UserResponse;


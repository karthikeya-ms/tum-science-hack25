/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SectorStatus from './SectorStatus';

/**
 * The SectorCreate model module.
 * @module models/SectorCreate
 * @version 0.1.0
 */
class SectorCreate {
    /**
     * Constructs a new <code>SectorCreate</code>.
     * DTO for creating a new sector. The geometry should be a valid GeoJSON Polygon.
     * @alias module:models/SectorCreate
     * @param geometry {Object.<String, Object>} A GeoJSON object representing the sector's polygon.
     */
    constructor(geometry) { 
        
        SectorCreate.initialize(this, geometry);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, geometry) { 
        obj['geometry'] = geometry;
    }

    /**
     * Constructs a <code>SectorCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/SectorCreate} obj Optional instance to populate.
     * @return {module:models/SectorCreate} The populated <code>SectorCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SectorCreate();

            if (data.hasOwnProperty('geometry')) {
                obj['geometry'] = ApiClient.convertToType(data['geometry'], {'String': Object});
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = SectorStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('risk_probability')) {
                obj['risk_probability'] = ApiClient.convertToType(data['risk_probability'], 'Number');
            }
            if (data.hasOwnProperty('assigned_to_ngo_id')) {
                obj['assigned_to_ngo_id'] = ApiClient.convertToType(data['assigned_to_ngo_id'], 'String');
            }
            if (data.hasOwnProperty('assigned_to_team_lead_id')) {
                obj['assigned_to_team_lead_id'] = ApiClient.convertToType(data['assigned_to_team_lead_id'], 'String');
            }
            if (data.hasOwnProperty('assigned_to_operator_id')) {
                obj['assigned_to_operator_id'] = ApiClient.convertToType(data['assigned_to_operator_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SectorCreate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SectorCreate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SectorCreate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['assigned_to_ngo_id'] && !(typeof data['assigned_to_ngo_id'] === 'string' || data['assigned_to_ngo_id'] instanceof String)) {
            throw new Error("Expected the field `assigned_to_ngo_id` to be a primitive type in the JSON string but got " + data['assigned_to_ngo_id']);
        }
        // ensure the json data is a string
        if (data['assigned_to_team_lead_id'] && !(typeof data['assigned_to_team_lead_id'] === 'string' || data['assigned_to_team_lead_id'] instanceof String)) {
            throw new Error("Expected the field `assigned_to_team_lead_id` to be a primitive type in the JSON string but got " + data['assigned_to_team_lead_id']);
        }
        // ensure the json data is a string
        if (data['assigned_to_operator_id'] && !(typeof data['assigned_to_operator_id'] === 'string' || data['assigned_to_operator_id'] instanceof String)) {
            throw new Error("Expected the field `assigned_to_operator_id` to be a primitive type in the JSON string but got " + data['assigned_to_operator_id']);
        }

        return true;
    }


}

SectorCreate.RequiredProperties = ["geometry"];

/**
 * A GeoJSON object representing the sector's polygon.
 * @member {Object.<String, Object>} geometry
 */
SectorCreate.prototype['geometry'] = undefined;

/**
 * @member {module:models/SectorStatus} status
 */
SectorCreate.prototype['status'] = undefined;

/**
 * @member {Number} risk_probability
 */
SectorCreate.prototype['risk_probability'] = undefined;

/**
 * @member {String} assigned_to_ngo_id
 */
SectorCreate.prototype['assigned_to_ngo_id'] = undefined;

/**
 * @member {String} assigned_to_team_lead_id
 */
SectorCreate.prototype['assigned_to_team_lead_id'] = undefined;

/**
 * @member {String} assigned_to_operator_id
 */
SectorCreate.prototype['assigned_to_operator_id'] = undefined;






export default SectorCreate;


/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { UserResponse } from '../models';
// @ts-ignore
import type { UserRole } from '../models';
// @ts-ignore
import type { UserStatus } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all active users.
         * @summary Get Active Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveUsersUsersActiveAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/active/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all users.
         * @summary Get All Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersUsersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all inactive users.
         * @summary Get Inactive Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInactiveUsersUsersInactiveAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/inactive/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all NGO users.
         * @summary Get Ngos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNgosUsersNgosAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/ngos/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Operator users, optionally filtered by Team Lead.
         * @summary Get Operators
         * @param {string | null} [teamLeadId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperatorsUsersOperatorsAllGet: async (teamLeadId?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/operators/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (teamLeadId !== undefined) {
                localVarQueryParameter['team_lead_id'] = teamLeadId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Team Lead users, optionally filtered by NGO.
         * @summary Get Team Leads
         * @param {string | null} [ngoId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamLeadsUsersTeamLeadsAllGet: async (ngoId?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/team-leads/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ngoId !== undefined) {
                localVarQueryParameter['ngo_id'] = ngoId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a user by ID.
         * @summary Get User By Id
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdUsersUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserByIdUsersUserIdGet', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all users under a specific parent user.
         * @summary Get Users By Parent
         * @param {string} parentUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByParentUsersParentParentUserIdGet: async (parentUserId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentUserId' is not null or undefined
            assertParamExists('getUsersByParentUsersParentParentUserIdGet', 'parentUserId', parentUserId)
            const localVarPath = `/users/parent/{parent_user_id}`
                .replace(`{${"parent_user_id"}}`, encodeURIComponent(String(parentUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all users with a specific role.
         * @summary Get Users By Role
         * @param {UserRole} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByRoleUsersRoleRoleGet: async (role: UserRole, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            assertParamExists('getUsersByRoleUsersRoleRoleGet', 'role', role)
            const localVarPath = `/users/role/{role}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all users with a specific status.
         * @summary Get Users By Status
         * @param {UserStatus} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByStatusUsersStatusStatusGet: async (status: UserStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('getUsersByStatusUsersStatusStatusGet', 'status', status)
            const localVarPath = `/users/status/{status}`
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all active users.
         * @summary Get Active Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveUsersUsersActiveAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActiveUsersUsersActiveAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getActiveUsersUsersActiveAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all users.
         * @summary Get All Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsersUsersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsersUsersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getAllUsersUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all inactive users.
         * @summary Get Inactive Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInactiveUsersUsersInactiveAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInactiveUsersUsersInactiveAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getInactiveUsersUsersInactiveAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all NGO users.
         * @summary Get Ngos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNgosUsersNgosAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNgosUsersNgosAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getNgosUsersNgosAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all Operator users, optionally filtered by Team Lead.
         * @summary Get Operators
         * @param {string | null} [teamLeadId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOperatorsUsersOperatorsAllGet(teamLeadId?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOperatorsUsersOperatorsAllGet(teamLeadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getOperatorsUsersOperatorsAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all Team Lead users, optionally filtered by NGO.
         * @summary Get Team Leads
         * @param {string | null} [ngoId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamLeadsUsersTeamLeadsAllGet(ngoId?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamLeadsUsersTeamLeadsAllGet(ngoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getTeamLeadsUsersTeamLeadsAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a user by ID.
         * @summary Get User By Id
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByIdUsersUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByIdUsersUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUserByIdUsersUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all users under a specific parent user.
         * @summary Get Users By Parent
         * @param {string} parentUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersByParentUsersParentParentUserIdGet(parentUserId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersByParentUsersParentParentUserIdGet(parentUserId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUsersByParentUsersParentParentUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all users with a specific role.
         * @summary Get Users By Role
         * @param {UserRole} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersByRoleUsersRoleRoleGet(role: UserRole, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersByRoleUsersRoleRoleGet(role, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUsersByRoleUsersRoleRoleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all users with a specific status.
         * @summary Get Users By Status
         * @param {UserStatus} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersByStatusUsersStatusStatusGet(status: UserStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersByStatusUsersStatusStatusGet(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUsersByStatusUsersStatusStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Get all active users.
         * @summary Get Active Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveUsersUsersActiveAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>> {
            return localVarFp.getActiveUsersUsersActiveAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get all users.
         * @summary Get All Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersUsersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>> {
            return localVarFp.getAllUsersUsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get all inactive users.
         * @summary Get Inactive Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInactiveUsersUsersInactiveAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>> {
            return localVarFp.getInactiveUsersUsersInactiveAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get all NGO users.
         * @summary Get Ngos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNgosUsersNgosAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>> {
            return localVarFp.getNgosUsersNgosAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Operator users, optionally filtered by Team Lead.
         * @summary Get Operators
         * @param {string | null} [teamLeadId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperatorsUsersOperatorsAllGet(teamLeadId?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>> {
            return localVarFp.getOperatorsUsersOperatorsAllGet(teamLeadId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Team Lead users, optionally filtered by NGO.
         * @summary Get Team Leads
         * @param {string | null} [ngoId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamLeadsUsersTeamLeadsAllGet(ngoId?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>> {
            return localVarFp.getTeamLeadsUsersTeamLeadsAllGet(ngoId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a user by ID.
         * @summary Get User By Id
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdUsersUserIdGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.getUserByIdUsersUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all users under a specific parent user.
         * @summary Get Users By Parent
         * @param {string} parentUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByParentUsersParentParentUserIdGet(parentUserId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>> {
            return localVarFp.getUsersByParentUsersParentParentUserIdGet(parentUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all users with a specific role.
         * @summary Get Users By Role
         * @param {UserRole} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByRoleUsersRoleRoleGet(role: UserRole, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>> {
            return localVarFp.getUsersByRoleUsersRoleRoleGet(role, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all users with a specific status.
         * @summary Get Users By Status
         * @param {UserStatus} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByStatusUsersStatusStatusGet(status: UserStatus, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>> {
            return localVarFp.getUsersByStatusUsersStatusStatusGet(status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - interface
 * @export
 * @interface UsersApi
 */
export interface UsersApiInterface {
    /**
     * Get all active users.
     * @summary Get Active Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getActiveUsersUsersActiveAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>>;

    /**
     * Get all users.
     * @summary Get All Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getAllUsersUsersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>>;

    /**
     * Get all inactive users.
     * @summary Get Inactive Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getInactiveUsersUsersInactiveAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>>;

    /**
     * Get all NGO users.
     * @summary Get Ngos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getNgosUsersNgosAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>>;

    /**
     * Get all Operator users, optionally filtered by Team Lead.
     * @summary Get Operators
     * @param {string | null} [teamLeadId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getOperatorsUsersOperatorsAllGet(teamLeadId?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>>;

    /**
     * Get all Team Lead users, optionally filtered by NGO.
     * @summary Get Team Leads
     * @param {string | null} [ngoId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getTeamLeadsUsersTeamLeadsAllGet(ngoId?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>>;

    /**
     * Get a user by ID.
     * @summary Get User By Id
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserByIdUsersUserIdGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<UserResponse>;

    /**
     * Get all users under a specific parent user.
     * @summary Get Users By Parent
     * @param {string} parentUserId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUsersByParentUsersParentParentUserIdGet(parentUserId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>>;

    /**
     * Get all users with a specific role.
     * @summary Get Users By Role
     * @param {UserRole} role 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUsersByRoleUsersRoleRoleGet(role: UserRole, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>>;

    /**
     * Get all users with a specific status.
     * @summary Get Users By Status
     * @param {UserStatus} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUsersByStatusUsersStatusStatusGet(status: UserStatus, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>>;

}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI implements UsersApiInterface {
    /**
     * Get all active users.
     * @summary Get Active Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getActiveUsersUsersActiveAllGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getActiveUsersUsersActiveAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all users.
     * @summary Get All Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getAllUsersUsersGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getAllUsersUsersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all inactive users.
     * @summary Get Inactive Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getInactiveUsersUsersInactiveAllGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getInactiveUsersUsersInactiveAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all NGO users.
     * @summary Get Ngos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getNgosUsersNgosAllGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getNgosUsersNgosAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all Operator users, optionally filtered by Team Lead.
     * @summary Get Operators
     * @param {string | null} [teamLeadId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getOperatorsUsersOperatorsAllGet(teamLeadId?: string | null, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getOperatorsUsersOperatorsAllGet(teamLeadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all Team Lead users, optionally filtered by NGO.
     * @summary Get Team Leads
     * @param {string | null} [ngoId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getTeamLeadsUsersTeamLeadsAllGet(ngoId?: string | null, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getTeamLeadsUsersTeamLeadsAllGet(ngoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a user by ID.
     * @summary Get User By Id
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserByIdUsersUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserByIdUsersUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all users under a specific parent user.
     * @summary Get Users By Parent
     * @param {string} parentUserId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsersByParentUsersParentParentUserIdGet(parentUserId: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsersByParentUsersParentParentUserIdGet(parentUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all users with a specific role.
     * @summary Get Users By Role
     * @param {UserRole} role 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsersByRoleUsersRoleRoleGet(role: UserRole, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsersByRoleUsersRoleRoleGet(role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all users with a specific status.
     * @summary Get Users By Status
     * @param {UserStatus} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsersByStatusUsersStatusStatusGet(status: UserStatus, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsersByStatusUsersStatusStatusGet(status, options).then((request) => request(this.axios, this.basePath));
    }
}


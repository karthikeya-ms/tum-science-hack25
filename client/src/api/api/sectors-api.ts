/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { SectorCreate } from '../models';
// @ts-ignore
import type { SectorResponse } from '../models';
// @ts-ignore
import type { SectorStatus } from '../models';
/**
 * SectorsApi - axios parameter creator
 * @export
 */
export const SectorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assign a sector to an NGO.
         * @summary Assign Sector To Ngo
         * @param {string} sectorId 
         * @param {string} ngoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSectorToNgoSectorsSectorIdAssignNgoNgoIdPut: async (sectorId: string, ngoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectorId' is not null or undefined
            assertParamExists('assignSectorToNgoSectorsSectorIdAssignNgoNgoIdPut', 'sectorId', sectorId)
            // verify required parameter 'ngoId' is not null or undefined
            assertParamExists('assignSectorToNgoSectorsSectorIdAssignNgoNgoIdPut', 'ngoId', ngoId)
            const localVarPath = `/sectors/{sector_id}/assign/ngo/{ngo_id}`
                .replace(`{${"sector_id"}}`, encodeURIComponent(String(sectorId)))
                .replace(`{${"ngo_id"}}`, encodeURIComponent(String(ngoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Assign a sector to an Operator.
         * @summary Assign Sector To Operator
         * @param {string} sectorId 
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSectorToOperatorSectorsSectorIdAssignOperatorOperatorIdPut: async (sectorId: string, operatorId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectorId' is not null or undefined
            assertParamExists('assignSectorToOperatorSectorsSectorIdAssignOperatorOperatorIdPut', 'sectorId', sectorId)
            // verify required parameter 'operatorId' is not null or undefined
            assertParamExists('assignSectorToOperatorSectorsSectorIdAssignOperatorOperatorIdPut', 'operatorId', operatorId)
            const localVarPath = `/sectors/{sector_id}/assign/operator/{operator_id}`
                .replace(`{${"sector_id"}}`, encodeURIComponent(String(sectorId)))
                .replace(`{${"operator_id"}}`, encodeURIComponent(String(operatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Assign a sector to a Team Lead.
         * @summary Assign Sector To Team Lead
         * @param {string} sectorId 
         * @param {string} teamLeadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSectorToTeamLeadSectorsSectorIdAssignTeamLeadTeamLeadIdPut: async (sectorId: string, teamLeadId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectorId' is not null or undefined
            assertParamExists('assignSectorToTeamLeadSectorsSectorIdAssignTeamLeadTeamLeadIdPut', 'sectorId', sectorId)
            // verify required parameter 'teamLeadId' is not null or undefined
            assertParamExists('assignSectorToTeamLeadSectorsSectorIdAssignTeamLeadTeamLeadIdPut', 'teamLeadId', teamLeadId)
            const localVarPath = `/sectors/{sector_id}/assign/team-lead/{team_lead_id}`
                .replace(`{${"sector_id"}}`, encodeURIComponent(String(sectorId)))
                .replace(`{${"team_lead_id"}}`, encodeURIComponent(String(teamLeadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new sector.
         * @summary Create Sector
         * @param {SectorCreate} sectorCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSectorSectorsPost: async (sectorCreate: SectorCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectorCreate' is not null or undefined
            assertParamExists('createSectorSectorsPost', 'sectorCreate', sectorCreate)
            const localVarPath = `/sectors/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sectorCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a sector.
         * @summary Delete Sector
         * @param {string} sectorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSectorSectorsSectorIdDelete: async (sectorId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectorId' is not null or undefined
            assertParamExists('deleteSectorSectorsSectorIdDelete', 'sectorId', sectorId)
            const localVarPath = `/sectors/{sector_id}`
                .replace(`{${"sector_id"}}`, encodeURIComponent(String(sectorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all sectors.
         * @summary Get All Sectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSectorsSectorsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sectors/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get sectors that are not assigned to any user (NGO, Team Lead, or Operator).
         * @summary Get Completely Unassigned Sectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompletelyUnassignedSectorsSectorsUnassignedAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sectors/unassigned/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a sector by ID.
         * @summary Get Sector By Id
         * @param {string} sectorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectorByIdSectorsSectorIdGet: async (sectorId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectorId' is not null or undefined
            assertParamExists('getSectorByIdSectorsSectorIdGet', 'sectorId', sectorId)
            const localVarPath = `/sectors/{sector_id}`
                .replace(`{${"sector_id"}}`, encodeURIComponent(String(sectorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all sectors assigned to a specific NGO.
         * @summary Get Sectors By Ngo
         * @param {string} ngoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectorsByNgoSectorsNgoNgoIdGet: async (ngoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ngoId' is not null or undefined
            assertParamExists('getSectorsByNgoSectorsNgoNgoIdGet', 'ngoId', ngoId)
            const localVarPath = `/sectors/ngo/{ngo_id}`
                .replace(`{${"ngo_id"}}`, encodeURIComponent(String(ngoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all sectors assigned to a specific Operator.
         * @summary Get Sectors By Operator
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectorsByOperatorSectorsOperatorOperatorIdGet: async (operatorId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operatorId' is not null or undefined
            assertParamExists('getSectorsByOperatorSectorsOperatorOperatorIdGet', 'operatorId', operatorId)
            const localVarPath = `/sectors/operator/{operator_id}`
                .replace(`{${"operator_id"}}`, encodeURIComponent(String(operatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all sectors with a specific status.
         * @summary Get Sectors By Status
         * @param {SectorStatus} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectorsByStatusSectorsStatusStatusGet: async (status: SectorStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('getSectorsByStatusSectorsStatusStatusGet', 'status', status)
            const localVarPath = `/sectors/status/{status}`
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all sectors assigned to a specific Team Lead.
         * @summary Get Sectors By Team Lead
         * @param {string} teamLeadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectorsByTeamLeadSectorsTeamLeadTeamLeadIdGet: async (teamLeadId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamLeadId' is not null or undefined
            assertParamExists('getSectorsByTeamLeadSectorsTeamLeadTeamLeadIdGet', 'teamLeadId', teamLeadId)
            const localVarPath = `/sectors/team-lead/{team_lead_id}`
                .replace(`{${"team_lead_id"}}`, encodeURIComponent(String(teamLeadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all sectors with their assigned users loaded.
         * @summary Get Sectors With Assignments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectorsWithAssignmentsSectorsWithAssignmentsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sectors/with-assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get sectors that are not assigned to any NGO.
         * @summary Get Unassigned Ngo Sectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnassignedNgoSectorsSectorsUnassignedNgoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sectors/unassigned/ngo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get sectors that are not assigned to any Operator.
         * @summary Get Unassigned Operator Sectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnassignedOperatorSectorsSectorsUnassignedOperatorGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sectors/unassigned/operator`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get sectors that are not assigned to any Team Lead.
         * @summary Get Unassigned Team Lead Sectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnassignedTeamLeadSectorsSectorsUnassignedTeamLeadGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sectors/unassigned/team-lead`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the status of a sector.
         * @summary Update Sector Status
         * @param {string} sectorId 
         * @param {SectorStatus} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSectorStatusSectorsSectorIdStatusStatusPut: async (sectorId: string, status: SectorStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectorId' is not null or undefined
            assertParamExists('updateSectorStatusSectorsSectorIdStatusStatusPut', 'sectorId', sectorId)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('updateSectorStatusSectorsSectorIdStatusStatusPut', 'status', status)
            const localVarPath = `/sectors/{sector_id}/status/{status}`
                .replace(`{${"sector_id"}}`, encodeURIComponent(String(sectorId)))
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SectorsApi - functional programming interface
 * @export
 */
export const SectorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SectorsApiAxiosParamCreator(configuration)
    return {
        /**
         * Assign a sector to an NGO.
         * @summary Assign Sector To Ngo
         * @param {string} sectorId 
         * @param {string} ngoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignSectorToNgoSectorsSectorIdAssignNgoNgoIdPut(sectorId: string, ngoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignSectorToNgoSectorsSectorIdAssignNgoNgoIdPut(sectorId, ngoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.assignSectorToNgoSectorsSectorIdAssignNgoNgoIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Assign a sector to an Operator.
         * @summary Assign Sector To Operator
         * @param {string} sectorId 
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignSectorToOperatorSectorsSectorIdAssignOperatorOperatorIdPut(sectorId: string, operatorId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignSectorToOperatorSectorsSectorIdAssignOperatorOperatorIdPut(sectorId, operatorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.assignSectorToOperatorSectorsSectorIdAssignOperatorOperatorIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Assign a sector to a Team Lead.
         * @summary Assign Sector To Team Lead
         * @param {string} sectorId 
         * @param {string} teamLeadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignSectorToTeamLeadSectorsSectorIdAssignTeamLeadTeamLeadIdPut(sectorId: string, teamLeadId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignSectorToTeamLeadSectorsSectorIdAssignTeamLeadTeamLeadIdPut(sectorId, teamLeadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.assignSectorToTeamLeadSectorsSectorIdAssignTeamLeadTeamLeadIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new sector.
         * @summary Create Sector
         * @param {SectorCreate} sectorCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSectorSectorsPost(sectorCreate: SectorCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSectorSectorsPost(sectorCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.createSectorSectorsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a sector.
         * @summary Delete Sector
         * @param {string} sectorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSectorSectorsSectorIdDelete(sectorId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSectorSectorsSectorIdDelete(sectorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.deleteSectorSectorsSectorIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all sectors.
         * @summary Get All Sectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSectorsSectorsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SectorResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSectorsSectorsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.getAllSectorsSectorsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get sectors that are not assigned to any user (NGO, Team Lead, or Operator).
         * @summary Get Completely Unassigned Sectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompletelyUnassignedSectorsSectorsUnassignedAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SectorResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompletelyUnassignedSectorsSectorsUnassignedAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.getCompletelyUnassignedSectorsSectorsUnassignedAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a sector by ID.
         * @summary Get Sector By Id
         * @param {string} sectorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSectorByIdSectorsSectorIdGet(sectorId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSectorByIdSectorsSectorIdGet(sectorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.getSectorByIdSectorsSectorIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all sectors assigned to a specific NGO.
         * @summary Get Sectors By Ngo
         * @param {string} ngoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSectorsByNgoSectorsNgoNgoIdGet(ngoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SectorResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSectorsByNgoSectorsNgoNgoIdGet(ngoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.getSectorsByNgoSectorsNgoNgoIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all sectors assigned to a specific Operator.
         * @summary Get Sectors By Operator
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSectorsByOperatorSectorsOperatorOperatorIdGet(operatorId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SectorResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSectorsByOperatorSectorsOperatorOperatorIdGet(operatorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.getSectorsByOperatorSectorsOperatorOperatorIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all sectors with a specific status.
         * @summary Get Sectors By Status
         * @param {SectorStatus} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSectorsByStatusSectorsStatusStatusGet(status: SectorStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SectorResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSectorsByStatusSectorsStatusStatusGet(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.getSectorsByStatusSectorsStatusStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all sectors assigned to a specific Team Lead.
         * @summary Get Sectors By Team Lead
         * @param {string} teamLeadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSectorsByTeamLeadSectorsTeamLeadTeamLeadIdGet(teamLeadId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SectorResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSectorsByTeamLeadSectorsTeamLeadTeamLeadIdGet(teamLeadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.getSectorsByTeamLeadSectorsTeamLeadTeamLeadIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all sectors with their assigned users loaded.
         * @summary Get Sectors With Assignments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSectorsWithAssignmentsSectorsWithAssignmentsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SectorResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSectorsWithAssignmentsSectorsWithAssignmentsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.getSectorsWithAssignmentsSectorsWithAssignmentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get sectors that are not assigned to any NGO.
         * @summary Get Unassigned Ngo Sectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnassignedNgoSectorsSectorsUnassignedNgoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SectorResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnassignedNgoSectorsSectorsUnassignedNgoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.getUnassignedNgoSectorsSectorsUnassignedNgoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get sectors that are not assigned to any Operator.
         * @summary Get Unassigned Operator Sectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnassignedOperatorSectorsSectorsUnassignedOperatorGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SectorResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnassignedOperatorSectorsSectorsUnassignedOperatorGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.getUnassignedOperatorSectorsSectorsUnassignedOperatorGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get sectors that are not assigned to any Team Lead.
         * @summary Get Unassigned Team Lead Sectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnassignedTeamLeadSectorsSectorsUnassignedTeamLeadGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SectorResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnassignedTeamLeadSectorsSectorsUnassignedTeamLeadGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.getUnassignedTeamLeadSectorsSectorsUnassignedTeamLeadGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the status of a sector.
         * @summary Update Sector Status
         * @param {string} sectorId 
         * @param {SectorStatus} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSectorStatusSectorsSectorIdStatusStatusPut(sectorId: string, status: SectorStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSectorStatusSectorsSectorIdStatusStatusPut(sectorId, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.updateSectorStatusSectorsSectorIdStatusStatusPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SectorsApi - factory interface
 * @export
 */
export const SectorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SectorsApiFp(configuration)
    return {
        /**
         * Assign a sector to an NGO.
         * @summary Assign Sector To Ngo
         * @param {string} sectorId 
         * @param {string} ngoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSectorToNgoSectorsSectorIdAssignNgoNgoIdPut(sectorId: string, ngoId: string, options?: RawAxiosRequestConfig): AxiosPromise<SectorResponse> {
            return localVarFp.assignSectorToNgoSectorsSectorIdAssignNgoNgoIdPut(sectorId, ngoId, options).then((request) => request(axios, basePath));
        },
        /**
         * Assign a sector to an Operator.
         * @summary Assign Sector To Operator
         * @param {string} sectorId 
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSectorToOperatorSectorsSectorIdAssignOperatorOperatorIdPut(sectorId: string, operatorId: string, options?: RawAxiosRequestConfig): AxiosPromise<SectorResponse> {
            return localVarFp.assignSectorToOperatorSectorsSectorIdAssignOperatorOperatorIdPut(sectorId, operatorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Assign a sector to a Team Lead.
         * @summary Assign Sector To Team Lead
         * @param {string} sectorId 
         * @param {string} teamLeadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSectorToTeamLeadSectorsSectorIdAssignTeamLeadTeamLeadIdPut(sectorId: string, teamLeadId: string, options?: RawAxiosRequestConfig): AxiosPromise<SectorResponse> {
            return localVarFp.assignSectorToTeamLeadSectorsSectorIdAssignTeamLeadTeamLeadIdPut(sectorId, teamLeadId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new sector.
         * @summary Create Sector
         * @param {SectorCreate} sectorCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSectorSectorsPost(sectorCreate: SectorCreate, options?: RawAxiosRequestConfig): AxiosPromise<SectorResponse> {
            return localVarFp.createSectorSectorsPost(sectorCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a sector.
         * @summary Delete Sector
         * @param {string} sectorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSectorSectorsSectorIdDelete(sectorId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSectorSectorsSectorIdDelete(sectorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all sectors.
         * @summary Get All Sectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSectorsSectorsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>> {
            return localVarFp.getAllSectorsSectorsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get sectors that are not assigned to any user (NGO, Team Lead, or Operator).
         * @summary Get Completely Unassigned Sectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompletelyUnassignedSectorsSectorsUnassignedAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>> {
            return localVarFp.getCompletelyUnassignedSectorsSectorsUnassignedAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a sector by ID.
         * @summary Get Sector By Id
         * @param {string} sectorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectorByIdSectorsSectorIdGet(sectorId: string, options?: RawAxiosRequestConfig): AxiosPromise<SectorResponse> {
            return localVarFp.getSectorByIdSectorsSectorIdGet(sectorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all sectors assigned to a specific NGO.
         * @summary Get Sectors By Ngo
         * @param {string} ngoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectorsByNgoSectorsNgoNgoIdGet(ngoId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>> {
            return localVarFp.getSectorsByNgoSectorsNgoNgoIdGet(ngoId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all sectors assigned to a specific Operator.
         * @summary Get Sectors By Operator
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectorsByOperatorSectorsOperatorOperatorIdGet(operatorId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>> {
            return localVarFp.getSectorsByOperatorSectorsOperatorOperatorIdGet(operatorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all sectors with a specific status.
         * @summary Get Sectors By Status
         * @param {SectorStatus} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectorsByStatusSectorsStatusStatusGet(status: SectorStatus, options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>> {
            return localVarFp.getSectorsByStatusSectorsStatusStatusGet(status, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all sectors assigned to a specific Team Lead.
         * @summary Get Sectors By Team Lead
         * @param {string} teamLeadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectorsByTeamLeadSectorsTeamLeadTeamLeadIdGet(teamLeadId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>> {
            return localVarFp.getSectorsByTeamLeadSectorsTeamLeadTeamLeadIdGet(teamLeadId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all sectors with their assigned users loaded.
         * @summary Get Sectors With Assignments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectorsWithAssignmentsSectorsWithAssignmentsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>> {
            return localVarFp.getSectorsWithAssignmentsSectorsWithAssignmentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get sectors that are not assigned to any NGO.
         * @summary Get Unassigned Ngo Sectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnassignedNgoSectorsSectorsUnassignedNgoGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>> {
            return localVarFp.getUnassignedNgoSectorsSectorsUnassignedNgoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get sectors that are not assigned to any Operator.
         * @summary Get Unassigned Operator Sectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnassignedOperatorSectorsSectorsUnassignedOperatorGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>> {
            return localVarFp.getUnassignedOperatorSectorsSectorsUnassignedOperatorGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get sectors that are not assigned to any Team Lead.
         * @summary Get Unassigned Team Lead Sectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnassignedTeamLeadSectorsSectorsUnassignedTeamLeadGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>> {
            return localVarFp.getUnassignedTeamLeadSectorsSectorsUnassignedTeamLeadGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Update the status of a sector.
         * @summary Update Sector Status
         * @param {string} sectorId 
         * @param {SectorStatus} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSectorStatusSectorsSectorIdStatusStatusPut(sectorId: string, status: SectorStatus, options?: RawAxiosRequestConfig): AxiosPromise<SectorResponse> {
            return localVarFp.updateSectorStatusSectorsSectorIdStatusStatusPut(sectorId, status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SectorsApi - interface
 * @export
 * @interface SectorsApi
 */
export interface SectorsApiInterface {
    /**
     * Assign a sector to an NGO.
     * @summary Assign Sector To Ngo
     * @param {string} sectorId 
     * @param {string} ngoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApiInterface
     */
    assignSectorToNgoSectorsSectorIdAssignNgoNgoIdPut(sectorId: string, ngoId: string, options?: RawAxiosRequestConfig): AxiosPromise<SectorResponse>;

    /**
     * Assign a sector to an Operator.
     * @summary Assign Sector To Operator
     * @param {string} sectorId 
     * @param {string} operatorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApiInterface
     */
    assignSectorToOperatorSectorsSectorIdAssignOperatorOperatorIdPut(sectorId: string, operatorId: string, options?: RawAxiosRequestConfig): AxiosPromise<SectorResponse>;

    /**
     * Assign a sector to a Team Lead.
     * @summary Assign Sector To Team Lead
     * @param {string} sectorId 
     * @param {string} teamLeadId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApiInterface
     */
    assignSectorToTeamLeadSectorsSectorIdAssignTeamLeadTeamLeadIdPut(sectorId: string, teamLeadId: string, options?: RawAxiosRequestConfig): AxiosPromise<SectorResponse>;

    /**
     * Create a new sector.
     * @summary Create Sector
     * @param {SectorCreate} sectorCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApiInterface
     */
    createSectorSectorsPost(sectorCreate: SectorCreate, options?: RawAxiosRequestConfig): AxiosPromise<SectorResponse>;

    /**
     * Delete a sector.
     * @summary Delete Sector
     * @param {string} sectorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApiInterface
     */
    deleteSectorSectorsSectorIdDelete(sectorId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get all sectors.
     * @summary Get All Sectors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApiInterface
     */
    getAllSectorsSectorsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>>;

    /**
     * Get sectors that are not assigned to any user (NGO, Team Lead, or Operator).
     * @summary Get Completely Unassigned Sectors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApiInterface
     */
    getCompletelyUnassignedSectorsSectorsUnassignedAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>>;

    /**
     * Get a sector by ID.
     * @summary Get Sector By Id
     * @param {string} sectorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApiInterface
     */
    getSectorByIdSectorsSectorIdGet(sectorId: string, options?: RawAxiosRequestConfig): AxiosPromise<SectorResponse>;

    /**
     * Get all sectors assigned to a specific NGO.
     * @summary Get Sectors By Ngo
     * @param {string} ngoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApiInterface
     */
    getSectorsByNgoSectorsNgoNgoIdGet(ngoId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>>;

    /**
     * Get all sectors assigned to a specific Operator.
     * @summary Get Sectors By Operator
     * @param {string} operatorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApiInterface
     */
    getSectorsByOperatorSectorsOperatorOperatorIdGet(operatorId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>>;

    /**
     * Get all sectors with a specific status.
     * @summary Get Sectors By Status
     * @param {SectorStatus} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApiInterface
     */
    getSectorsByStatusSectorsStatusStatusGet(status: SectorStatus, options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>>;

    /**
     * Get all sectors assigned to a specific Team Lead.
     * @summary Get Sectors By Team Lead
     * @param {string} teamLeadId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApiInterface
     */
    getSectorsByTeamLeadSectorsTeamLeadTeamLeadIdGet(teamLeadId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>>;

    /**
     * Get all sectors with their assigned users loaded.
     * @summary Get Sectors With Assignments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApiInterface
     */
    getSectorsWithAssignmentsSectorsWithAssignmentsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>>;

    /**
     * Get sectors that are not assigned to any NGO.
     * @summary Get Unassigned Ngo Sectors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApiInterface
     */
    getUnassignedNgoSectorsSectorsUnassignedNgoGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>>;

    /**
     * Get sectors that are not assigned to any Operator.
     * @summary Get Unassigned Operator Sectors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApiInterface
     */
    getUnassignedOperatorSectorsSectorsUnassignedOperatorGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>>;

    /**
     * Get sectors that are not assigned to any Team Lead.
     * @summary Get Unassigned Team Lead Sectors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApiInterface
     */
    getUnassignedTeamLeadSectorsSectorsUnassignedTeamLeadGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<SectorResponse>>;

    /**
     * Update the status of a sector.
     * @summary Update Sector Status
     * @param {string} sectorId 
     * @param {SectorStatus} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApiInterface
     */
    updateSectorStatusSectorsSectorIdStatusStatusPut(sectorId: string, status: SectorStatus, options?: RawAxiosRequestConfig): AxiosPromise<SectorResponse>;

}

/**
 * SectorsApi - object-oriented interface
 * @export
 * @class SectorsApi
 * @extends {BaseAPI}
 */
export class SectorsApi extends BaseAPI implements SectorsApiInterface {
    /**
     * Assign a sector to an NGO.
     * @summary Assign Sector To Ngo
     * @param {string} sectorId 
     * @param {string} ngoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public assignSectorToNgoSectorsSectorIdAssignNgoNgoIdPut(sectorId: string, ngoId: string, options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).assignSectorToNgoSectorsSectorIdAssignNgoNgoIdPut(sectorId, ngoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Assign a sector to an Operator.
     * @summary Assign Sector To Operator
     * @param {string} sectorId 
     * @param {string} operatorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public assignSectorToOperatorSectorsSectorIdAssignOperatorOperatorIdPut(sectorId: string, operatorId: string, options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).assignSectorToOperatorSectorsSectorIdAssignOperatorOperatorIdPut(sectorId, operatorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Assign a sector to a Team Lead.
     * @summary Assign Sector To Team Lead
     * @param {string} sectorId 
     * @param {string} teamLeadId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public assignSectorToTeamLeadSectorsSectorIdAssignTeamLeadTeamLeadIdPut(sectorId: string, teamLeadId: string, options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).assignSectorToTeamLeadSectorsSectorIdAssignTeamLeadTeamLeadIdPut(sectorId, teamLeadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new sector.
     * @summary Create Sector
     * @param {SectorCreate} sectorCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public createSectorSectorsPost(sectorCreate: SectorCreate, options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).createSectorSectorsPost(sectorCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a sector.
     * @summary Delete Sector
     * @param {string} sectorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public deleteSectorSectorsSectorIdDelete(sectorId: string, options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).deleteSectorSectorsSectorIdDelete(sectorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all sectors.
     * @summary Get All Sectors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public getAllSectorsSectorsGet(options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).getAllSectorsSectorsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get sectors that are not assigned to any user (NGO, Team Lead, or Operator).
     * @summary Get Completely Unassigned Sectors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public getCompletelyUnassignedSectorsSectorsUnassignedAllGet(options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).getCompletelyUnassignedSectorsSectorsUnassignedAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a sector by ID.
     * @summary Get Sector By Id
     * @param {string} sectorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public getSectorByIdSectorsSectorIdGet(sectorId: string, options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).getSectorByIdSectorsSectorIdGet(sectorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all sectors assigned to a specific NGO.
     * @summary Get Sectors By Ngo
     * @param {string} ngoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public getSectorsByNgoSectorsNgoNgoIdGet(ngoId: string, options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).getSectorsByNgoSectorsNgoNgoIdGet(ngoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all sectors assigned to a specific Operator.
     * @summary Get Sectors By Operator
     * @param {string} operatorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public getSectorsByOperatorSectorsOperatorOperatorIdGet(operatorId: string, options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).getSectorsByOperatorSectorsOperatorOperatorIdGet(operatorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all sectors with a specific status.
     * @summary Get Sectors By Status
     * @param {SectorStatus} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public getSectorsByStatusSectorsStatusStatusGet(status: SectorStatus, options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).getSectorsByStatusSectorsStatusStatusGet(status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all sectors assigned to a specific Team Lead.
     * @summary Get Sectors By Team Lead
     * @param {string} teamLeadId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public getSectorsByTeamLeadSectorsTeamLeadTeamLeadIdGet(teamLeadId: string, options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).getSectorsByTeamLeadSectorsTeamLeadTeamLeadIdGet(teamLeadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all sectors with their assigned users loaded.
     * @summary Get Sectors With Assignments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public getSectorsWithAssignmentsSectorsWithAssignmentsGet(options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).getSectorsWithAssignmentsSectorsWithAssignmentsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get sectors that are not assigned to any NGO.
     * @summary Get Unassigned Ngo Sectors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public getUnassignedNgoSectorsSectorsUnassignedNgoGet(options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).getUnassignedNgoSectorsSectorsUnassignedNgoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get sectors that are not assigned to any Operator.
     * @summary Get Unassigned Operator Sectors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public getUnassignedOperatorSectorsSectorsUnassignedOperatorGet(options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).getUnassignedOperatorSectorsSectorsUnassignedOperatorGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get sectors that are not assigned to any Team Lead.
     * @summary Get Unassigned Team Lead Sectors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public getUnassignedTeamLeadSectorsSectorsUnassignedTeamLeadGet(options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).getUnassignedTeamLeadSectorsSectorsUnassignedTeamLeadGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the status of a sector.
     * @summary Update Sector Status
     * @param {string} sectorId 
     * @param {SectorStatus} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public updateSectorStatusSectorsSectorIdStatusStatusPut(sectorId: string, status: SectorStatus, options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).updateSectorStatusSectorsSectorIdStatusStatusPut(sectorId, status, options).then((request) => request(this.axios, this.basePath));
    }
}


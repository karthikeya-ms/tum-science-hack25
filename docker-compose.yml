services:
  nginx:
    restart: always
    image: nginx:stable-alpine
    healthcheck:
      test: "curl -f http://localhost:80 || exit 1"
      interval: 1s
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/cert.crt:/etc/nginx/cert.crt:ro
      - ./docker/nginx/private.key:/etc/nginx/private.key:ro
    depends_on:
      - server
    ports:
      - "80:80"
      - "443:443"
    networks:
      - server

  client:
    restart: always
    build:
      context: ./client
      dockerfile: Dockerfile.local
      target: development
    volumes:
      - ./client:/app
      - node-modules-client:/app/node_modules
    healthcheck:
      test: "curl -f http://client:3000 || exit 1"
      interval: 5s
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-https://api.demining.tum.de}
      # Add these environment variables to fix HMR issues:
      CHOKIDAR_USEPOLLING: "true"
      CHOKIDAR_INTERVAL: 1000
      WATCHPACK_POLLING: "true"
    networks:
      - server

  server:
    restart: always
    build:
      context: ./server
      dockerfile: Dockerfile
      target: development
    environment:
      ALLOWED_ORIGIN: https://demining.tum.de
      POSTGRESQL_USER: ${POSTGRESQL_USER:-postgres}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD:-postgres}
      POSTGRESQL_HOST: ${POSTGRESQL_HOST:-db}
      POSTGRESQL_PORT: ${POSTGRESQL_PORT:-5432}
      POSTGRESQL_DB: ${POSTGRESQL_DB:-postgres}
    ports:
      - "8000:8000"
    volumes:
      - ./server:/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - server

  db:
    restart: always
    build:
      context: ./docker/postgresql
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres -d postgres'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - server


networks:
  server:

volumes:
  db-data:
  node-modules-client: